/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pv_stream;

import java.io.*;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Comparator;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author DELL
 */
public class Search extends javax.swing.JFrame {
    static ArrayList<Persona> lista = new ArrayList<Persona>();
    DefaultTableModel model = new DefaultTableModel();
    String[] columna;
    /**
     * Creates new form Search
     */
    public Search(){
        initComponents(); 
        setLocationRelativeTo(null);
        model.addColumn("Mombres");
        model.addColumn("Primer Apellido");
        model.addColumn("Segundo Apellido");
        jTPersonas.setModel(model);
        cargar("C:\\Users\\DELL\\Documents\\NetBeansProjects\\PV_Stream\\src\\pv_stream\\archivo.txt");        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTFName = new javax.swing.JTextField();
        jBSearch = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTPersonas = new javax.swing.JTable();
        jBLoadDates = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Escriba un nombre:");

        jBSearch.setText("Buscar");
        jBSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSearchActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Buscar Personas");

        jTPersonas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTPersonas);

        jBLoadDates.setText("Cargar Datos");
        jBLoadDates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBLoadDatesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jTFName, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jBSearch))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(jBLoadDates, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(47, 47, 47)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 41, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBSearch)
                    .addComponent(jBLoadDates))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSearchActionPerformed
        // TODO add your handling code here:
        buscar();
    }//GEN-LAST:event_jBSearchActionPerformed

    private void jBLoadDatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBLoadDatesActionPerformed
        cargarTabla(); 
    }//GEN-LAST:event_jBLoadDatesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Search().setVisible(true);                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBLoadDates;
    private javax.swing.JButton jBSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTFName;
    private javax.swing.JTable jTPersonas;
    // End of variables declaration//GEN-END:variables
    
    public static void cargar(String direccion){
        Instant tiempoInicio = Instant.now();
        try {
            BufferedReader leer = new BufferedReader(new FileReader(direccion));
            String llenar;
            String[] datos;         
            while((llenar=leer.readLine())!= null){
                datos= llenar.split(" ");
                Persona per = new Persona();
                per.setName(datos[0]);
                per.setFirstLastName(datos[1]);
                per.setSecondLastName(datos[2]);
                lista.add(per);                
            }                        
        } catch (Exception ex) {
            System.out.println("Archivo no encontrado");
        }
        long tiempoTotal = (long)(ChronoUnit.MILLIS.between(tiempoInicio, Instant.now()));
        System.out.println("¡El tiempo transcurrido para cargar ha sido de " + tiempoTotal + " milisegundos!");
    }
    public void cargarTabla(){
        Instant tiempoInicio = Instant.now();
        model.setRowCount(0); 
        for (Persona per : lista) {
            Object[] fila = {per.getName(), per.getFirstLastName(), per.getSecondLastName()};
            model.addRow(fila); 
        }
        long tiempoTotal = (long)(ChronoUnit.MILLIS.between(tiempoInicio, Instant.now()));
       System.out.println("¡El tiempo transcurrido para cargar la tabla ha sido de " + tiempoTotal + " milisegundos!");
    }    
    
    public void buscar(){
        Instant tiempoInicio = Instant.now();
        model.setRowCount(0);
        lista.stream().filter(elemento -> elemento.getName().equalsIgnoreCase(jTFName.getText()))
                .sorted(Comparator.comparing(Persona::getName)).forEach(per -> {                    
                        Object[] newRow = {per.getName(), per.getFirstLastName(), per.getSecondLastName()};
                        model.addRow(newRow);
        });
       jTPersonas.setModel(model);        
       long tiempoTotal = (long)(ChronoUnit.MILLIS.between(tiempoInicio, Instant.now()));
       System.out.println("¡El tiempo transcurrido para buscar ha sido de " + tiempoTotal + " milisegundos!");
    }
}
